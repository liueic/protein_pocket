name: Build and Push Container Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to container registry'
        required: true
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event.inputs.push_to_registry == 'true')
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') || github.event.inputs.push_to_registry == 'true') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build Singularity image
      if: github.event_name != 'pull_request'
      run: |
        # Install Singularity
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libssl-dev \
          uuid-dev \
          libgpgme11-dev \
          squashfs-tools \
          libseccomp-dev \
          wget \
          pkg-config \
          git \
          cryptsetup-bin
        
        # Download and install Singularity
        export VERSION=3.11.4
        wget https://github.com/sylabs/singularity/releases/download/v${VERSION}/singularity-ce-${VERSION}.tar.gz
        tar -xzf singularity-ce-${VERSION}.tar.gz
        cd singularity-ce-${VERSION}
        ./mconfig
        make -C builddir
        sudo make -C builddir install
        
        # Build Singularity image
        sudo singularity build protein_pocket.sif Singularity.def
        
        # Test the image
        sudo singularity run protein_pocket.sif --help

    - name: Upload Singularity image
      if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
      uses: actions/upload-artifact@v4
      with:
        name: protein_pocket_singularity
        path: protein_pocket.sif
        retention-days: 30

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          protein_pocket.sif
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-container:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Singularity image
      uses: actions/download-artifact@v4
      with:
        name: protein_pocket_singularity
        path: .

    - name: Install Singularity
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          libssl-dev \
          uuid-dev \
          libgpgme11-dev \
          squashfs-tools \
          libseccomp-dev \
          wget \
          pkg-config \
          git \
          cryptsetup-bin
        
        export VERSION=3.11.4
        wget https://github.com/sylabs/singularity/releases/download/v${VERSION}/singularity-ce-${VERSION}.tar.gz
        tar -xzf singularity-ce-${VERSION}.tar.gz
        cd singularity-ce-${VERSION}
        ./mconfig
        make -C builddir
        sudo make -C builddir install

    - name: Run container tests
      run: |
        # Create test data
        mkdir -p test_data
        cat > test_data/test_protein.pdb << 'EOF'
        HEADER    TEST PROTEIN
        ATOM      1  N   ALA A   1      20.154  16.967  23.862  1.00 11.18           N
        ATOM      2  CA  ALA A   1      19.030  16.140  23.862  1.00 11.18           C
        ATOM      3  C   ALA A   1      17.762  16.967  23.862  1.00 11.18           C
        ATOM      4  O   ALA A   1      17.762  18.194  23.862  1.00 11.18           O
        ATOM      5  CB  ALA A   1      19.030  15.313  25.123  1.00 11.18           C
        END
        EOF
        
        # Test basic commands
        sudo singularity run protein_pocket.sif --help
        sudo singularity run protein_pocket.sif version
        
        # Test single file processing
        sudo singularity run -B $(pwd)/test_data:/data -B $(pwd):/output protein_pocket.sif run /data/test_protein.pdb --workdir /output --topk 1
        
        echo "âœ… All tests passed!"

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
